#!/bin/bash

# Set variables
PROJECT_NAME="myproject"
APP_NAME="myapp"
BASE_DIR="/home/mdp/python_django_clickhouse_1"

# Create base directory
mkdir -p $BASE_DIR/$PROJECT_NAME

# Create a virtual environment and activate it
python3 -m venv $BASE_DIR/venv
source $BASE_DIR/venv/bin/activate

# Install Django, Django REST Framework, ClickHouse driver, and django-clickhouse-backend
pip install django djangorestframework clickhouse-driver django-clickhouse-backend

# Create Django project
django-admin startproject $PROJECT_NAME $BASE_DIR/$PROJECT_NAME

# Navigate to the project directory
cd $BASE_DIR/$PROJECT_NAME

# Create Django app
python manage.py startapp $APP_NAME

# Create settings.py with the provided template content
SETTINGS_PATH="$BASE_DIR/$PROJECT_NAME/$PROJECT_NAME/settings.py"
echo "Creating $SETTINGS_PATH..."

cat <<EOL > $SETTINGS_PATH
"""
Django settings for $PROJECT_NAME project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import clickhouse_backend

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-^x0ihrz3$tk%qu3*42fqv_$q)a#@r&sk$$=pmf&#)@!h(+am7a'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'rest_framework',
    '$APP_NAME',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "clickhouse_backend",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = '$PROJECT_NAME.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = '$PROJECT_NAME.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    },
    "clickhouse": {
        "ENGINE": "clickhouse_backend.backend",
        'NAME': 'default',
        'USER': 'default',
        'PASSWORD': '',
        'HOST': 'localhost',
    }
}
DATABASE_ROUTERS = ["dbrouters.ClickHouseRouter"]

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
EOL

# Update urls.py
URLS_PATH="$BASE_DIR/$PROJECT_NAME/$PROJECT_NAME/urls.py"
echo "Amending $URLS_PATH..."

# Add the necessary imports and urlpatterns
cat <<EOL >> $URLS_PATH

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('$APP_NAME.urls')),
]
EOL

# Create basic models.py
MODELS_PATH="$BASE_DIR/$PROJECT_NAME/$APP_NAME/models.py"
echo "Creating $MODELS_PATH..."
cat <<EOL > $MODELS_PATH
from django.db import models

class ExampleModel(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=255)
    created_at = models.DateTimeField()

    class Meta:
        db_table = 'example_model'
EOL

# Create basic serializers.py
SERIALIZERS_PATH="$BASE_DIR/$PROJECT_NAME/$APP_NAME/serializers.py"
echo "Creating $SERIALIZERS_PATH..."
cat <<EOL > $SERIALIZERS_PATH
from rest_framework import serializers
from .models import ExampleModel

class ExampleModelSerializer(serializers.ModelSerializer):
    class Meta:
        model = ExampleModel
        fields = '__all__'
EOL

# Create basic views.py
VIEWS_PATH="$BASE_DIR/$PROJECT_NAME/$APP_NAME/views.py"
echo "Creating $VIEWS_PATH..."
cat <<EOL > $VIEWS_PATH
from rest_framework import viewsets
from .models import ExampleModel
from .serializers import ExampleModelSerializer

class ExampleModelViewSet(viewsets.ModelViewSet):
    queryset = ExampleModel.objects.all()
    serializer_class = ExampleModelSerializer
EOL

# Create basic urls.py for the app
APP_URLS_PATH="$BASE_DIR/$PROJECT_NAME/$APP_NAME/urls.py"
echo "Creating $APP_URLS_PATH..."
cat <<EOL > $APP_URLS_PATH
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import ExampleModelViewSet

router = DefaultRouter()
router.register(r'example', ExampleModelViewSet)

urlpatterns = [
    path('', include(router.urls)),
]
EOL

# Create dbrouters module
DBROUTERS_PATH="$BASE_DIR/$PROJECT_NAME/dbrouters.py"
echo "Creating $DBROUTERS_PATH..."
cat <<EOL > $DBROUTERS_PATH
class ClickHouseRouter:
    """
    A router to control all database operations on models for the ClickHouse database.
    """
    def db_for_read(self, model, **hints):
        """
        Attempts to read clickhouse models go to clickhouse.
        """
        if model._meta.app_label == 'myapp':
            return 'clickhouse'
        return None

    def db_for_write(self, model, **hints):
        """
        Attempts to write clickhouse models go to clickhouse.
        """
        if model._meta.app_label == 'myapp':
            return 'clickhouse'
        return None

    def allow_relation(self, obj1, obj2, **hints):
        """
        Allow relations if a model in the clickhouse db is involved.
        """
        if obj1._meta.app_label == 'myapp' or obj2._meta.app_label == 'myapp':
            return True
        return None

    def allow_migrate(self, db, app_label, model_name=None, **hints):
        """
        Make sure the clickhouse app only appears in the 'clickhouse' database.
        """
        if app_label == 'myapp':
            return db == 'clickhouse'
        return None
EOL

# Run migrations
python manage.py makemigrations
python manage.py migrate

# Final instructions
echo "Setup complete. To start the development server:"
echo "1. Navigate to the project directory: cd $BASE_DIR/$PROJECT_NAME"
echo "2. Activate the virtual environment: source venv/bin/activate"
echo "3. Run the server: python manage.py runserver"
